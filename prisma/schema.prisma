// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  wishlist      Product[] @relation("UserWishlist")

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

// Product model for store items
model Product {
  id              String    @id @default(cuid())
  name            String
  description     String
  price           Decimal
  images          String[]
  stock           Int
  sku             String    @unique
  categoryId      String
  specifications  Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  category        Category     @relation(fields: [categoryId], references: [id])
  reviews         Review[]
  orderItems      OrderItem[]
  cartItems       CartItem[]
  wishedByUsers   User[]      @relation("UserWishlist")

  @@map("products")
}

// Category model for product organization
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

// Order model for purchases
model Order {
  id              String    @id @default(cuid())
  userId          String
  status          OrderStatus
  subtotal        Decimal
  tax             Decimal
  shipping        Decimal
  total           Decimal
  shippingAddress Json
  billingAddress  Json
  paymentIntent   String?   @unique
  paymentStatus   PaymentStatus
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@map("orders")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// OrderItem model for order details
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Review model for product reviews
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

// Cart model for shopping cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Relations
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("carts")
}

// CartItem model for cart details
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

// Address model for user addresses
model Address {
  id            String   @id @default(cuid())
  userId        String
  type          AddressType
  firstName     String
  lastName      String
  streetAddress String
  city          String
  state         String
  postalCode    String
  country       String
  phone         String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
}
